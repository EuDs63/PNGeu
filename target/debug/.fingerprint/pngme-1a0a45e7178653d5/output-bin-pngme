{"message":"expected `;`, found `}`","code":null,"level":"error","spans":[{"file_name":"src/chunk.rs","byte_start":279,"byte_end":280,"line_start":13,"line_end":13,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    }","highlight_start":5,"highlight_end":6}],"label":"unexpected token","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/chunk.rs","byte_start":274,"byte_end":274,"line_start":12,"line_end":12,"column_start":38,"column_end":38,"is_primary":true,"text":[{"text":"        let crc =  crc::Crc::checksum","highlight_start":38,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"add `;` here","code":null,"level":"help","spans":[{"file_name":"src/chunk.rs","byte_start":274,"byte_end":274,"line_start":12,"line_end":12,"column_start":38,"column_end":38,"is_primary":true,"text":[{"text":"        let crc =  crc::Crc::checksum","highlight_start":38,"highlight_end":38}],"label":null,"suggested_replacement":";","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: expected `;`, found `}`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/chunk.rs:12:38\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let crc =  crc::Crc::checksum\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: add `;` here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12munexpected token\u001b[0m\n\n"}
{"message":"an inner attribute is not permitted in this context","code":null,"level":"error","spans":[{"file_name":"src/chunk.rs","byte_start":319,"byte_end":4287,"line_start":20,"line_end":149,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"fn main() {","highlight_start":1,"highlight_end":12},{"text":"#[cfg(test)]","highlight_start":1,"highlight_end":13},{"text":"mod tests {","highlight_start":1,"highlight_end":12},{"text":"    use super::*;","highlight_start":1,"highlight_end":18},{"text":"    use crate::chunk_type::ChunkType;","highlight_start":1,"highlight_end":38},{"text":"    use std::str::FromStr;","highlight_start":1,"highlight_end":27},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    fn testing_chunk() -> Chunk {","highlight_start":1,"highlight_end":34},{"text":"        let data_length: u32 = 42;","highlight_start":1,"highlight_end":35},{"text":"        let chunk_type = \"RuSt\".as_bytes();","highlight_start":1,"highlight_end":44},{"text":"        let message_bytes = \"This is where your secret message will be!\".as_bytes();","highlight_start":1,"highlight_end":85},{"text":"        let crc: u32 = 2882656334;","highlight_start":1,"highlight_end":35},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let chunk_data: Vec<u8> = data_length","highlight_start":1,"highlight_end":46},{"text":"            .to_be_bytes()","highlight_start":1,"highlight_end":27},{"text":"            .iter()","highlight_start":1,"highlight_end":20},{"text":"            .chain(chunk_type.iter())","highlight_start":1,"highlight_end":38},{"text":"            .chain(message_bytes.iter())","highlight_start":1,"highlight_end":41},{"text":"            .chain(crc.to_be_bytes().iter())","highlight_start":1,"highlight_end":45},{"text":"            .copied()","highlight_start":1,"highlight_end":22},{"text":"            .collect();","highlight_start":1,"highlight_end":24},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        Chunk::try_from(chunk_data.as_ref()).unwrap()","highlight_start":1,"highlight_end":54},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn test_new_chunk() {","highlight_start":1,"highlight_end":26},{"text":"        let chunk_type = ChunkType::from_str(\"RuSt\").unwrap();","highlight_start":1,"highlight_end":63},{"text":"        let data = \"This is where your secret message will be!\".as_bytes().to_vec();","highlight_start":1,"highlight_end":85},{"text":"        let chunk = Chunk::new(chunk_type, data);","highlight_start":1,"highlight_end":50},{"text":"        assert_eq!(chunk.length(), 42);","highlight_start":1,"highlight_end":40},{"text":"        assert_eq!(chunk.crc(), 2882656334);","highlight_start":1,"highlight_end":45},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn test_chunk_length() {","highlight_start":1,"highlight_end":29},{"text":"        let chunk = testing_chunk();","highlight_start":1,"highlight_end":37},{"text":"        assert_eq!(chunk.length(), 42);","highlight_start":1,"highlight_end":40},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn test_chunk_type() {","highlight_start":1,"highlight_end":27},{"text":"        let chunk = testing_chunk();","highlight_start":1,"highlight_end":37},{"text":"        assert_eq!(chunk.chunk_type().to_string(), String::from(\"RuSt\"));","highlight_start":1,"highlight_end":74},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn test_chunk_string() {","highlight_start":1,"highlight_end":29},{"text":"        let chunk = testing_chunk();","highlight_start":1,"highlight_end":37},{"text":"        let chunk_string = chunk.data_as_string().unwrap();","highlight_start":1,"highlight_end":60},{"text":"        let expected_chunk_string = String::from(\"This is where your secret message will be!\");","highlight_start":1,"highlight_end":96},{"text":"        assert_eq!(chunk_string, expected_chunk_string);","highlight_start":1,"highlight_end":57},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn test_chunk_crc() {","highlight_start":1,"highlight_end":26},{"text":"        let chunk = testing_chunk();","highlight_start":1,"highlight_end":37},{"text":"        assert_eq!(chunk.crc(), 2882656334);","highlight_start":1,"highlight_end":45},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn test_valid_chunk_from_bytes() {","highlight_start":1,"highlight_end":39},{"text":"        let data_length: u32 = 42;","highlight_start":1,"highlight_end":35},{"text":"        let chunk_type = \"RuSt\".as_bytes();","highlight_start":1,"highlight_end":44},{"text":"        let message_bytes = \"This is where your secret message will be!\".as_bytes();","highlight_start":1,"highlight_end":85},{"text":"        let crc: u32 = 2882656334;","highlight_start":1,"highlight_end":35},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let chunk_data: Vec<u8> = data_length","highlight_start":1,"highlight_end":46},{"text":"            .to_be_bytes()","highlight_start":1,"highlight_end":27},{"text":"            .iter()","highlight_start":1,"highlight_end":20},{"text":"            .chain(chunk_type.iter())","highlight_start":1,"highlight_end":38},{"text":"            .chain(message_bytes.iter())","highlight_start":1,"highlight_end":41},{"text":"            .chain(crc.to_be_bytes().iter())","highlight_start":1,"highlight_end":45},{"text":"            .copied()","highlight_start":1,"highlight_end":22},{"text":"            .collect();","highlight_start":1,"highlight_end":24},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let chunk = Chunk::try_from(chunk_data.as_ref()).unwrap();","highlight_start":1,"highlight_end":67},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let chunk_string = chunk.data_as_string().unwrap();","highlight_start":1,"highlight_end":60},{"text":"        let expected_chunk_string = String::from(\"This is where your secret message will be!\");","highlight_start":1,"highlight_end":96},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        assert_eq!(chunk.length(), 42);","highlight_start":1,"highlight_end":40},{"text":"        assert_eq!(chunk.chunk_type().to_string(), String::from(\"RuSt\"));","highlight_start":1,"highlight_end":74},{"text":"        assert_eq!(chunk_string, expected_chunk_string);","highlight_start":1,"highlight_end":57},{"text":"        assert_eq!(chunk.crc(), 2882656334);","highlight_start":1,"highlight_end":45},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn test_invalid_chunk_from_bytes() {","highlight_start":1,"highlight_end":41},{"text":"        let data_length: u32 = 42;","highlight_start":1,"highlight_end":35},{"text":"        let chunk_type = \"RuSt\".as_bytes();","highlight_start":1,"highlight_end":44},{"text":"        let message_bytes = \"This is where your secret message will be!\".as_bytes();","highlight_start":1,"highlight_end":85},{"text":"        let crc: u32 = 2882656333;","highlight_start":1,"highlight_end":35},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let chunk_data: Vec<u8> = data_length","highlight_start":1,"highlight_end":46},{"text":"            .to_be_bytes()","highlight_start":1,"highlight_end":27},{"text":"            .iter()","highlight_start":1,"highlight_end":20},{"text":"            .chain(chunk_type.iter())","highlight_start":1,"highlight_end":38},{"text":"            .chain(message_bytes.iter())","highlight_start":1,"highlight_end":41},{"text":"            .chain(crc.to_be_bytes().iter())","highlight_start":1,"highlight_end":45},{"text":"            .copied()","highlight_start":1,"highlight_end":22},{"text":"            .collect();","highlight_start":1,"highlight_end":24},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let chunk = Chunk::try_from(chunk_data.as_ref());","highlight_start":1,"highlight_end":58},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        assert!(chunk.is_err());","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    pub fn test_chunk_trait_impls() {","highlight_start":1,"highlight_end":38},{"text":"        let data_length: u32 = 42;","highlight_start":1,"highlight_end":35},{"text":"        let chunk_type = \"RuSt\".as_bytes();","highlight_start":1,"highlight_end":44},{"text":"        let message_bytes = \"This is where your secret message will be!\".as_bytes();","highlight_start":1,"highlight_end":85},{"text":"        let crc: u32 = 2882656334;","highlight_start":1,"highlight_end":35},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let chunk_data: Vec<u8> = data_length","highlight_start":1,"highlight_end":46},{"text":"            .to_be_bytes()","highlight_start":1,"highlight_end":27},{"text":"            .iter()","highlight_start":1,"highlight_end":20},{"text":"            .chain(chunk_type.iter())","highlight_start":1,"highlight_end":38},{"text":"            .chain(message_bytes.iter())","highlight_start":1,"highlight_end":41},{"text":"            .chain(crc.to_be_bytes().iter())","highlight_start":1,"highlight_end":45},{"text":"            .copied()","highlight_start":1,"highlight_end":22},{"text":"            .collect();","highlight_start":1,"highlight_end":24},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        let chunk: Chunk = TryFrom::try_from(chunk_data.as_ref()).unwrap();","highlight_start":1,"highlight_end":76},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        let _chunk_string = format!(\"{}\", chunk);","highlight_start":1,"highlight_end":50},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"the inner attribute doesn't annotate this function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/chunk.rs","byte_start":291,"byte_end":318,"line_start":19,"line_end":19,"column_start":1,"column_end":28,"is_primary":true,"text":[{"text":"#![allow(unused_variables)]","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to annotate the function, change the attribute from inner to outer style","code":null,"level":"help","spans":[{"file_name":"src/chunk.rs","byte_start":292,"byte_end":293,"line_start":19,"line_end":19,"column_start":2,"column_end":3,"is_primary":true,"text":[{"text":"#![allow(unused_variables)]","highlight_start":2,"highlight_end":3}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: an inner attribute is not permitted in this context\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/chunk.rs:19:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m19\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m#![allow(unused_variables)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m20\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mfn main() {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(test)]\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mmod tests {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m23\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    use super::*;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m148\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m149\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthe inner attribute doesn't annotate this function\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: to annotate the function, change the attribute from inner to outer style\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m19\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m#\u001b[0m\u001b[0m\u001b[38;5;9m!\u001b[0m\u001b[0m[allow(unused_variables)]\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m19\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m#[allow(unused_variables)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"failed to resolve: use of undeclared crate or module `crc`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"src/chunk.rs","byte_start":256,"byte_end":259,"line_start":12,"line_end":12,"column_start":20,"column_end":23,"is_primary":true,"text":[{"text":"        let crc =  crc::Crc::checksum","highlight_start":20,"highlight_end":23}],"label":"use of undeclared crate or module `crc`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared crate or module `crc`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/chunk.rs:12:20\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let crc =  crc::Crc::checksum\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared crate or module `crc`\u001b[0m\n\n"}
{"message":"unused import: `self`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/chunk.rs","byte_start":24,"byte_end":28,"line_start":1,"line_end":1,"column_start":25,"column_end":29,"is_primary":true,"text":[{"text":"use crate::chunk_type::{self, ChunkType};","highlight_start":25,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"src/chunk.rs","byte_start":24,"byte_end":30,"line_start":1,"line_end":1,"column_start":25,"column_end":31,"is_primary":true,"text":[{"text":"use crate::chunk_type::{self, ChunkType};","highlight_start":25,"highlight_end":31}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `self`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/chunk.rs:1:25\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse crate::chunk_type::{self, ChunkType};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"message":"unused import: `io::Bytes`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/chunk_type.rs","byte_start":24,"byte_end":33,"line_start":1,"line_end":1,"column_start":25,"column_end":34,"is_primary":true,"text":[{"text":"use std::{str::FromStr, io::Bytes};","highlight_start":25,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"src/chunk_type.rs","byte_start":22,"byte_end":33,"line_start":1,"line_end":1,"column_start":23,"column_end":34,"is_primary":true,"text":[{"text":"use std::{str::FromStr, io::Bytes};","highlight_start":23,"highlight_end":34}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `io::Bytes`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/chunk_type.rs:1:25\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse std::{str::FromStr, io::Bytes};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/chunk.rs","byte_start":230,"byte_end":235,"line_start":11,"line_end":11,"column_start":51,"column_end":56,"is_primary":true,"text":[{"text":"    fn new(chunk_type:ChunkType,data: Vec<u8>) -> Chunk{","highlight_start":51,"highlight_end":56}],"label":"expected `Chunk`, found `()`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/chunk.rs","byte_start":187,"byte_end":190,"line_start":11,"line_end":11,"column_start":8,"column_end":11,"is_primary":false,"text":[{"text":"    fn new(chunk_type:ChunkType,data: Vec<u8>) -> Chunk{","highlight_start":8,"highlight_end":11}],"label":"implicitly returns `()` as its body has no tail or `return` expression","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/chunk.rs:11:51\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn new(chunk_type:ChunkType,data: Vec<u8>) -> Chunk{\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---\u001b[0m\u001b[0m                                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `Chunk`, found `()`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mimplicitly returns `()` as its body has no tail or `return` expression\u001b[0m\n\n"}
{"message":"aborting due to 4 previous errors; 2 warnings emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 4 previous errors; 2 warnings emitted\u001b[0m\n\n"}
{"message":"Some errors have detailed explanations: E0308, E0433.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0308, E0433.\u001b[0m\n"}
{"message":"For more information about an error, try `rustc --explain E0308`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0308`.\u001b[0m\n"}
